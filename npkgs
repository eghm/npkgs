#!/usr/local/bin/perl -w
use strict;

use File::Path;
use Term::ANSIColor;

$| = 1;
my $debug = 0;

my $npkg_prefix = $ENV{NPKG_PREFIX} || "/usr/local";
print "PREFIX: $npkg_prefix\n" if $debug;


#
#_* main
#

my $action = shift @ARGV;

if ( $action eq "install" ) {
    for my $package ( @ARGV ) {
        install_package( $package );
    }
}
elsif ( $action eq "link" ) {
    link_package( @ARGV );
}
elsif ( $action eq "deadlinks" ) {
    print `find $npkg_prefix -type l ! -xtype f ! -xtype d -ls -exec rm {} \\;`;
}
else {
    die "ERROR: action not supported: $action\n";
}


print "DONE\n\n";


#
#_* methods
#

sub link_package {
    my ( $package ) = @_;

    print "\n", ">"x77, "\n";
    print "Linking package: $package\n";

    my $path = "$npkg_prefix/root/$package";
    print "PATH: $path\n";
    unless ( -r $path ) { die "ERROR: path not found: $path\n" }

    my $installed = readlink( $path );
    print "INSTALLED: $installed\n\n";
    unless ( -r $installed ) { die "ERROR: installed path not found: $installed\n" }

    my $version = $installed;
    $version =~ s|^$npkg_prefix/root/||;

    # run command capturing output
    open my $run, "-|", "find $path/ -type f 2>&1" or die "Unable to execute find in $installed: $!";
  ENTRY:
    while ( my $entry = <$run> )
    {
      chomp $entry;
      print $entry, " ... " if $debug;

      my $symlink = $entry;
      $symlink =~ s|^$path/|$npkg_prefix/|;

      if ( -r $symlink ) {
          print "Already exists: $symlink ... " if $debug;
          my $already_target = readlink( $symlink );

          if ( $already_target eq $entry ) {
              print "\tAlready linked to $entry" if $debug;
              next ENTRY;
          }
          else {
              print "\tunlinking $entry from $already_target\n";
              unlink( $symlink );
          }
      }

      my $dir = $symlink;
      $dir =~ s|^(.*)/.*?$|$1|;
      unless ( -d $dir ) {
          print "Creating directory: $dir\n";
          mkpath( $dir );
      }
      #print "\tLinking...\n";
      print "ln -s $entry $symlink\n" if $debug;
      print `ln -s $entry $symlink`;
    }
    close $run;

    # check exit status
    unless ( $? eq 0 ) {
      my $status = $? >> 8;
      my $signal = $? & 127;
      die "Error finding files in $installed!\n\tstatus=$status\n\tsignal=$signal";
    }

}

sub install_package {
    my ( $package ) = @_;

    print "\n", ">"x77, "\n";
    print "Installing package: $package\n";

    my $path = "$npkg_prefix/npkg/*/$package";
    #$glob =~ tr/a-zA-Z\/\*//cd;
    #print "GLOB: $glob\n" if $debug;
    #my $path = glob $glob;
    #unless ( $path ) {
    #    die "ERROR: can't locate path for $glob\n";
    #}
    print "PATH: $path\n" if $debug;

    #unless ( -r $path ) {
    #    die "Error: Package path not found: $path\n";
    #}

    print "Executing: $package.sh in $path\n";

    # run command capturing output
    open my $run, "-|", "cd $path && ./$package.sh 2>&1" or die "Unable to execute package installer: $package: $!";
    while ( my $line = <$run> )
    {
      chomp $line;

      if ( $line =~ m|Error: PREREQ not found:| ) {
          print "$line\n";

          close $run;
          $line =~ m|/([^/]+)$|;
          my $prereq = $1;
          $prereq =~ s|\s||g;

          print "Installing prereq: $prereq\n";
          install_package( $prereq  );

          print "Prereq $prereq satistifed, back to installing $package\n";
          install_package( $package );
          return;
      }
      elsif ( $line =~ m|^checking | ) {
          $line =~ s/^(checking (?:whether|for|if|how to)|checking )//;
          print "$1";
          print color 'cyan';

          $line =~ s|(.*)... (.*?)$||;
          my $check = $1 || $line;;
          my $answer = $2;

          print "$check... ";

          if ( $answer ) {
              if ( $answer =~ m/yes|ok/ ) {
                  print color 'green';
              }
              elsif ( $answer =~ m|\bno| ) {
                  print color 'red';
              }
              else {
                  print color 'yellow';
              }
              print $answer;
          }

          print color 'reset';
          print "\n";
      }
      elsif ( $line =~ m/^\s*\S*(?:gcc|cc|make|install|libtool) /i ) {
          $line =~ m/^(\s*\S*(?:gcc|cc|make|install|libtool)) (.*)$/i;
          print color 'magenta';
          print "$1 ";
          print color 'reset';
          print "$2\n";
      }
      elsif ( $line =~ m/^(?:configure|config.status): / ) {
          print color 'bold blue';
          print "$line\n";
          print color 'reset';
      }
      elsif ( $line =~ m/^cd / ) {
          $line =~ m|^(cd \S+)(.*)$|;
          print color 'green';
          print "$1";
          print color 'reset';
          print "$2\n";
      }
      elsif ( $line =~ m|^\s*\S*\s*\S+libtool | ) {
          $line =~ m|^(\s*\S*\s*\S+libtool) (.*)$|;
          print color 'magenta';
          print "$1 ";
          print color 'reset';
          print "$2\n";
      }
      elsif ( $line =~ m|^x | ) {
          print color 'yellow';
          print "$line\n";
          print color 'reset';
      }
      elsif ( $line =~ m|warning[:\s]|i && $line !~ m|seems to be moved| ) {
          print color 'bold yellow';
          print "$line\n";
          print color 'reset';
      }
      elsif ( $line =~ m|error[:\s]|i ) {
          print color 'bold red';
          print "$line\n";
          print color 'reset';
      }
      else {
          print "$line\n";
      }
    }
    close $run;

    # check exit status
    unless ( $? eq 0 ) {
      my $status = $? >> 8;
      my $signal = $? & 127;
      die "Error installing package: $package\n\tstatus=$status\n\tsignal=$signal";
    }

    print "Removing work directory for $package...\n";
    system( "cd $path && rm -rf work/" );
}
